线程和进程
    》进程
    程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。
而进程是程序在处理器上的一次执行过程，它是一个动态的概念。
    进程是一个具有一定独立功能的程序，一个实体，每一个进程都有它自己的地址空间

    》线程
    线程实际上是在进程基础之上的进一步划分，一个进程启动之后，里面的若干程序又
可以划分成若干个线程。
    线程：是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发
执行，一个进程最少有一个线程(单线程程序)
    •一个程序可以同时执行多个任务，来提供效率。

线程的状态(四种状态)
    >就绪状态(Ready):线程对象创建后，其他线程调用了该对象的start()方法。该状
态度线程位于“可运行线程池”中，变得可运行，指等待获取cpu的使用权.
    >运行状态(Running):就绪状态的线程获取了cpu执行程序代码
    >阻塞状态(Blocked):是应为某个放弃cpu使用权，暂时停止运行。直到线程进入就绪
状态，才有机会转到运行状态。（阻塞分为3种）
     1)等待阻塞:运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把线
程放入“等待池”。进入这个状态后，不能自动唤醒，必须依靠其他线程调用notify()或
notifyAll()方法才能被唤醒
     2)同步阻塞:运行的线程在获取对象的同步锁是，诺该同步锁被别的线程占用，则JVM会
把改线程放入“锁池”中。
     3)其他阻塞:运行的线程执行sleep()金额join()方法，或者发出来I/O请求时JVM会把
该线程设置为阻塞状态，当sleep状态超时,或者join()等待线程终止或者超时，或者i/0处理
完毕时，线程重新转入就绪状态。
    >死状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期.


        /**   两种方式的区别：
         * １.源码的区别
         *  >继承Thread：由于子类重写Thread类的run(),当调用start()时直接找子类的run()方法
         *  >实现Runnable:构造函数中传入了Runnable的引用，有个成员变量记住了它，调用run()方法时
         *  　内部判断成员变量(target)Runnable的引用是否为空
         * ２.继承Thread
         *  >好处是：可以直接使用Thread类中的方法，代码简单
         *  >弊端是：如果已有了父类，就不能用这种方法
         * ３.实现Runnable接口
         *  >好处是：即使自已定义的线程类有了父类也没关系，因为有了父类也可以实现接口，代码更为灵活
         *  >弊端是：不能直接使用Thread中的方法，需要先获取到线程对象后，才能得到Thread的方法，代码更为复杂
         *
         */
